import telebot
import random
import json
from telebot import types
 
# –∑–∞–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã 
f = open('fact.txt', 'r', encoding='UTF-8')
facts = f.read().split('.')
f.close()

f = open('gencongratulation.txt', 'r', encoding='UTF-8')
cong  = f.read().split('***')
f.close()



# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot('')


DATABASE_FILE = "my_giftdata.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Ñ–∞–π–ª–∞ JSON –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try:
    with open(DATABASE_FILE, 'r') as f:
        mygift = json.load(f)
except FileNotFoundError:
    mygift = {}

# Function to save the dictionary to the JSON file
def save_data():
    with open(DATABASE_FILE, 'w') as f:
        json.dump(mygift, f)

@bot.message_handler(commands=['add'])
def add_key(message):
    try:
        # Extract the key and value from the command arguments
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            bot.reply_to(message, "Please provide a key and a value. Example: /add my_key my_value")
            return

        key = parts[1].strip()
        value = parts[2].strip()

        mygift[key] = value
        save_data()  # Save the updated dictionary to the file
        bot.reply_to(message, f"Key '{key}' with value '{value}' added successfully.")
    except Exception as e:
        bot.reply_to(message, f"An error occurred: {e}")

@bot.message_handler(commands=['show'])
def show_dictionary(message):
    if mygift:
        response = "Current dictionary:\n"
        for key, value in mygift.items():
            response += f"- {key}: {value}\n"
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "The dictionary is currently empty.")

@bot.message_handler(commands=['del'])
def delete_key(message):
    try:
        # Extract the key to delete from the command arguments
        key_to_delete = message.text.split(' ', 1)[1].strip()

        if key_to_delete in mygift:
            del mygift[key_to_delete]
            save_data()  # Save the updated dictionary to the file
            bot.reply_to(message, f"Key '{key_to_delete}' deleted successfully.")
        else:
            bot.reply_to(message, f"Key '{key_to_delete}' not found in the dictionary.")
    except IndexError:
        bot.reply_to(message, "Please provide a key to delete. Example: /delete my_key")
    except Exception as e:
        bot.reply_to(message, f"An error occurred: {e}") 

@bot.message_handler(commands=['gen'])
def get_text_messages(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ')
    markup.add(btn1)
    answer = random.choice(cong)
    bot.send_message(message.from_user.id, "```" + answer + "```", parse_mode='MarkdownV2', reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ß—Ç–æ –¥–∞—Ä–∏—Ç—å?")
    btn2 = types.KeyboardButton("–ö–æ–≥–¥–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?")
    btn3 = types.KeyboardButton("–ò—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç")
    markup.add(btn1,btn3)
    markup.add(btn2)
    bot.send_message(message.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π,\U0001F44B —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –°—Ç–µ–ø–∞–Ω–∞.\U0001F423 –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å?", reply_markup=markup)
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text == '–ß—Ç–æ –¥–∞—Ä–∏—Ç—å?' or message.text == '–ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ü–æ–¥–∞—Ä—é –¥–µ–Ω—å–≥–∏')
        btn2 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫')
        markup.add(btn1, btn2,)
        bot.send_message(message.from_user.id, '–õ—É—á—à–∏–π –ø–æ–¥–∞—Ä–æ–∫ —ç—Ç–æ –¥–µ–Ω—å–≥–∏, –Ω–æ –Ω–µ —Å–∞–º—ã–π –ø—Ä–∏—è—Ç–Ω—ã–π.', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    elif message.text == '–í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫' or message.text == '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–í—Å–µ')
        btn2 = types.KeyboardButton('1000 - 2000')
        btn3 = types.KeyboardButton('500 - 1000')
        btn4 = types.KeyboardButton('2000 - 5000')
        btn5 = types.KeyboardButton('5000 <')
        btn6 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(btn1)
        markup.add(btn3, btn2)
        markup.add(btn4, btn5)
        markup.add(btn6)
        bot.send_message(message.from_user.id, '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. \n –°—Å—ã–ª–∫–∏ –¥–∞–Ω—ã –Ω–∞ "–û–∑–æ–Ω", –Ω–æ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —É–∫–∞–∑–∞–Ω–∏–µ–º –∫ –ø–æ–∫—É–ø–∫–µ –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ.', reply_markup=markup)
    elif message.text == '–ö–æ–≥–¥–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ß—Ç–æ –¥–∞—Ä–∏—Ç—å?')
        btn2 = types.KeyboardButton('–ò—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç')
        markup.add(btn1, btn2,)
        bot.send_message(message.from_user.id, '1 –º–∞—Ä—Ç–∞ 1994 –≥–æ–¥–∞. \n31 –≥–æ–¥ –Ω–∞–∑–∞–¥.', reply_markup=markup)
    elif message.text == '–ò—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ß—Ç–æ –¥–∞—Ä–∏—Ç—å?')
        btn2 = types.KeyboardButton('–ö–æ–≥–¥–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?')
        btn3 = types.KeyboardButton('–ò—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç')
        markup.add(btn1, btn2)
        markup.add(btn3)
        answer = random.choice(facts)
        bot.send_message(message.from_user.id, answer, reply_markup=markup)  
    elif message.text == '–ü–æ–¥–∞—Ä—é –¥–µ–Ω—å–≥–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ')
        btn2 = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(btn1)
        markup.add(btn2)
        bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! \n–ï—â–µ —Ç—É—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏—è—Ç–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–æ—á–µ—Å—Ç—å –≤ —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. \n–ß—Ç–æ –±—ã —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ \U000025B6/gen \n–í—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Å–∫–æ–ø–∏—Ä—É–π –Ω–∞–∂–∞–≤ –Ω–∞ —Ç–µ–∫—Å—Ç –∏ –≤—Å—Ç–∞–≤—å –≤ —Å—Ç—Ä–æ–∫—É –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–¥—É–º–∞–π —Å–≤–æ–µ.", reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    elif message.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ')
        markup.add(btn1)
        answer = random.choice(cong)
        bot.send_message(message.from_user.id, "```" + answer + "```", parse_mode='MarkdownV2', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    elif message.text == '–í—Å–µ':
        with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
            mygift = json.load(f)
        for key, value in mygift.items():
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn2 = types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data = f'reserve_{key}')
            markup.add(btn2)
            bot.send_message(message.chat.id, key, reply_markup = markup)  
    elif message.text == '500 - 1000':
        with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
            mygift = json.load(f)
            found_gift = False
        for key, value in mygift.items():
            if 500 <= int(value) <= 1000:
                found_gift = True
                markup = types.InlineKeyboardMarkup(row_width=2)
                btn2 = types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data = f'reserve_{key}')
                markup.add(btn2)
                bot.send_message(message.chat.id, key, reply_markup = markup)
        if not found_gift:
            bot.send_message(message.chat.id, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∫–æ–≤ üòî')
    elif message.text == '1000 - 2000':
        with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
            mygift = json.load(f)
            found_gift = False
        for key, value in mygift.items():
            if 1000 <= int(value) <= 2000:
                found_gift = True
                markup = types.InlineKeyboardMarkup(row_width=2)
                btn2 = types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data = f'reserve_{key}')
                markup.add(btn2)
                bot.send_message(message.chat.id, key, reply_markup = markup)
        if not found_gift:
            bot.send_message(message.chat.id, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∫–æ–≤ üòî')
    elif message.text == '2000 - 5000':
        found_gift = False
        with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
            mygift = json.load(f)
        for key, value in mygift.items():
            if 2000 <= int(value) <= 5000:
                found_gift = True
                markup = types.InlineKeyboardMarkup(row_width=2)
                btn2 = types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data = f'reserve_{key}')
                markup.add(btn2)
                bot.send_message(message.chat.id, key, reply_markup = markup)
        if not found_gift:
            bot.send_message(message.chat.id, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∫–æ–≤ üòî')
    elif message.text == '5000 <':
        found_gift = False
        with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
            mygift = json.load(f)
        for key, value in mygift.items():
            if int(value) >= 5000:
                found_gift = True
                markup = types.InlineKeyboardMarkup(row_width=2)
                btn2 = types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data = f'reserve_{key}')
                markup.add(btn2)
                bot.send_message(message.chat.id, key, reply_markup = markup)
        if not found_gift:
            bot.send_message(message.chat.id, '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∫–æ–≤ üòî')                       
    elif message.text != "–ö–æ–≥–¥–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?":
        file_name = "congratulation.txt"
        f = open(file_name, 'a')
        f.write(message.from_user.first_name + ' | ' + message.text + '\n' + '------------------------------------------------------' + '\n')
        f.close()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ò—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç')
        markup.add(btn1)
        bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ.\U0001F973 \n–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ', reply_markup=markup)
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = call.from_user.id
    with open(DATABASE_FILE, 'r', encoding='utf-8') as f:
            mygift = json.load(f)
    key = call.data.split('_')[1]        
    if key in mygift.keys():
        if key in mygift:
            del mygift[key]
            save_data()
            file_name = "lockgift.txt"
            with open(file_name, 'a', encoding='utf-8') as log_file:
                log_file.write(f"{user_id} | {key}\n")
            bot.answer_callback_query(call.id, show_alert=True, text="–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫. \n–¢–µ–ø–µ—Ä—å –æ–Ω –ø—Ä–æ–ø–∞–ª –∏–∑ –ø–æ–∏—Å–∫–∞ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. ")
            bot.send_message(call.message.chat.id, "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–º–∏ –ø–æ–¥–∞—Ä–æ–∫\U00002935 \n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞: /add —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã " + key)
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! \n–ï—â–µ —Ç—É—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏—è—Ç–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–æ—á–µ—Å—Ç—å –≤ —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. \n–ß—Ç–æ –±—ã —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ \U000025B6/gen \n–í—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Å–∫–æ–ø–∏—Ä—É–π –Ω–∞–∂–∞–≤ –Ω–∞ —Ç–µ–∫—Å—Ç –∏ –≤—Å—Ç–∞–≤—å –≤ —Å—Ç—Ä–æ–∫—É –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–¥—É–º–∞–π —Å–≤–æ–µ.'")
        with open(DATABASE_FILE, 'w') as f:
             json.dump(mygift, f)


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)
